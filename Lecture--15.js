//интеграци я в html
//1 интегрирование прямо в разметку html <script> не желателен
//2 подкючается отдельым файлом main.js   <script src="../">
//преимущества
//
//3 вставка js кода в атрибуды html например в input onchange = "кусок js кода"
//использование атрибутов с префиксом on (onclick onmouseover) для задани яфункции обработчика js при возникновении события
//плохой стиль привязки
//4 можно прямо в адресную строку javascript:

//javascript программа - включает инлайновые скрипты скрипты в атрибутах весь js код в адресной сроке после javascript:
//и внешние файлы с расширением js весь этот код объединяется в window object и соответственно один и тот же document object
//и они разделяют одни и теже глобальные функции и переменные
//исключение iframe выполняется независимо такак это отдельная программа со свои window и document
//iframe он работает сос своим собственным windw и document

//как выполняется программа js в браузере
//1 подгрузка - подгружаются инлайн скрипты и файлы.js и сразу исполняются
//2 асинхронный этап управляемая событиями фаза событие - вызывается соответственная функция обработчик



//весь код можно разделить на Synchronous Asynchronous Deffered

//синхронный по умолчанию пока не выполниться загузка все останавливается

//html5 появились атрибуды defer и async
//асинхронный выполняется паралельно и выполняеться как только загрузилось
//defer -//- выполняется когда весь документ будет загружен (парсить)

//процесс выполнения js приложения
//1 содание document и прсер стартует работу по страничке html и заполняет объект document объектами element и объектами text
//document.readyState = 'loading'
//2 парсер встречает script если не async и не defer применяется синхронный режим
//3 если парсер встречает скрипт с атрибутом async - парсер стртует загрузку скрипта и родолжает парсить документ
//скрип будет выполнен как только будет загружен
//4 когда документ распаршен до конца то свойства объекта document.readyState = 'interractive'
//5 если встречается скрипт с defer начинают отрабатываться
//6 браузер генерирует событие DOMContentLoaded на объекте Document - наше приложение переходит во вторую фазу асинхронный этап(см выше)
//но в этот момент могут продлаться выполняться скрипты async
//7 весь документ подгружен и все скрипты выполнены но браузер дожидатся подгрузки статического элементов типа фото стили итд
//когда все подгружено до конца document.readyState = 'complite' срабатывает onload
//8 когда происходят соытия вызываются соответствующие функции обработчики

//DOM document object model
//элемент дерева - нода
//1й тип элементов это эл-ты которые представляют отдельные теги и первый тип ноды это html тег
//2й текстовые ноды
//3й тип ноды это html коментарии оформляются отдельным типом ноды
//xml json



//выбор элементов DOM
//getElementById()- поиск по id атрибут у каждоо элемента уникальный
//getElementsByName() - поиск по имени получим все элементы с таким именем nodeList(псевдомассив) список этих объектов
//getElementsByTagName() - возвращает nodeList со всеми тегами(он есть и у объекта element.getElementByTagName())
//getElementsByClassName() - по классам (появился в html5) - nodeList getElementsByClassName('class1 class2')- прмениться только если у элемента есть два класса
//с использованием css3 селекторов(объединяет все вышеперечисленные способы)
//# поиск по id
//div поиск по класс
//warning по классу
//[lang="fr"] - по атрибуту
//span.class1.class2 - с двумя классами
//#log span - наследник
//#log>span наследник первого уровня
//body>h1:first:child
//div, #log - вернет все дивы и один элемент с айди лог
//querrySelectorAll() - применяет как строку сформированный css селектор и возвращает nodelist и он не живой (если что нить поменяем в нем ничего не поменяется)
//если ничего не найдено возвращается пустой элемент
//если будет ошиька в селекторе то выбрасывает ошибку exeption
//в jquerry аналогом является -  $()
